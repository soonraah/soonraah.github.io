<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Medallion Architecture on Froglog</title>
    <link>https://soonraah.github.io/tags/medallion-architecture/</link>
    <description>Recent content in Medallion Architecture on Froglog</description>
    <image>
      <title>Froglog</title>
      <url>https://soonraah.github.io/image/brand/soonraah_full.png</url>
      <link>https://soonraah.github.io/image/brand/soonraah_full.png</link>
    </image>
    <generator>Hugo -- 0.147.3</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 11 Jun 2025 08:30:00 +0900</lastBuildDate>
    <atom:link href="https://soonraah.github.io/tags/medallion-architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ふつうのデータ基盤移行 - Part 3. アーキテクチャ編</title>
      <link>https://soonraah.github.io/posts/ordinary-data-platform-migration-part-3/</link>
      <pubDate>Wed, 11 Jun 2025 08:30:00 +0900</pubDate>
      <guid>https://soonraah.github.io/posts/ordinary-data-platform-migration-part-3/</guid>
      <description>&lt;h2 id=&#34;このポストについて&#34;&gt;このポストについて&lt;/h2&gt;
&lt;p&gt;データ基盤移行について書いていくシリーズです。&lt;br&gt;
シリーズ一覧は&lt;a href=&#34;https://soonraah.github.io/tags/%E3%81%B5%E3%81%A4%E3%81%86%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%9F%BA%E7%9B%A4%E7%A7%BB%E8%A1%8C/&#34;&gt;こちら&lt;/a&gt;から。&lt;/p&gt;
&lt;p&gt;前回 &lt;a href=&#34;https://soonraah.github.io/posts/ordinary-data-platform-migration-part-2/&#34;&gt;Part 2. 技術選定編&lt;/a&gt;では技術選定について書きました。&lt;br&gt;
今回はそれを踏まえた結果としてどのようなアーキテクチャになったかを書きます。&lt;/p&gt;
&lt;h2 id=&#34;スコープ&#34;&gt;スコープ&lt;/h2&gt;
&lt;p&gt;前回の記事ではプラットフォームとして Databricks を選定したことやその経緯について記載しました。&lt;br&gt;
一方、それより詳細な技術スタックを含むシステムアーキテクチャについては示していませんでした。&lt;br&gt;
例えばデータ基盤では通常次のような技術スタックについて考える必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ取込&lt;/li&gt;
&lt;li&gt;workflow orchestration&lt;/li&gt;
&lt;li&gt;ELT (or ETL)&lt;/li&gt;
&lt;li&gt;storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらについて述べ、またデータ基盤の階層構造についても説明します。&lt;/p&gt;
&lt;h2 id=&#34;システムアーキテクチャ&#34;&gt;システムアーキテクチャ&lt;/h2&gt;
&lt;p&gt;データ基盤のシステム・アーキテクチャです。&lt;br&gt;
よく混同されがちですが、&lt;a href=&#34;https://soonraah.github.io/posts/dmbok-chapter-4/&#34;&gt;データアーキテクチャ&lt;/a&gt;ではありません。&lt;/p&gt;
&lt;p&gt;AWS + Databricks の構成をベースとして構築されています。&lt;/p&gt;
&lt;h3 id=&#34;概要図&#34;&gt;概要図&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;system architecture&#34; loading=&#34;lazy&#34; src=&#34;https://soonraah.github.io/image/ordinary-data-plagform-migration/system-architecture.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;データ取込&#34;&gt;データ取込&lt;/h3&gt;
&lt;p&gt;現時点ではデータソースとしては S3 に置かれた半構造化データ (JSON)、RDS がメインとなっています。&lt;br&gt;
これら2つの取込方法について述べます。&lt;/p&gt;
&lt;p&gt;まず、S3 のデータは SQL の &lt;code&gt;copy into&lt;/code&gt; 文により取り込んでいます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.databricks.com/aws/en/ingestion/cloud-object-storage/copy-into/&#34;&gt;Get started using COPY INTO to load data | Databricks Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.databricks.com/aws/en/ingestion/cloud-object-storage/auto-loader&#34;&gt;Auto Loader&lt;/a&gt; を使う方が Databricks 的でありそれも検討したのですが、schema evolution や冪等性など検討した結果として &lt;code&gt;copy into&lt;/code&gt; を採用しました。&lt;/p&gt;
&lt;p&gt;RDS からのデータ取込は foreign catalog 経由で行います。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
