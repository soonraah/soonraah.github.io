<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data Integration on Froglog</title>
    <link>https://soonraah.github.io/tags/data-integration/</link>
    <description>Recent content in Data Integration on Froglog</description>
    <image>
      <title>Froglog</title>
      <url>https://soonraah.github.io/47</url>
      <link>https://soonraah.github.io/47</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 04 Apr 2024 06:30:00 +0900</lastBuildDate><atom:link href="https://soonraah.github.io/tags/data-integration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>読書メモ: DMBOK2 第8章 データ統合と相互運用性</title>
      <link>https://soonraah.github.io/posts/dmbok-chapter-8/</link>
      <pubDate>Thu, 04 Apr 2024 06:30:00 +0900</pubDate>
      
      <guid>https://soonraah.github.io/posts/dmbok-chapter-8/</guid>
      <description>このポストについて DMBOK2 を読み進めていくシリーズ。
今回は第8章「データ統合と相互運用性」について。
業務で扱っているデータ基盤はデータ統合が不完全であるため、なんとかしたいと考えている。
以降、特に注釈のない引用は DMBOK2 第8章からの引用とする。
データストレージと相互運用性とは データ統合と相互運用性 (DII: Data Integration and Interoperability) は次のように定義されている。
アプリケーションや組織内および相互間におけるデータの移動と統合を管理する
データの移動を効率的に管理することがそのビジネス上の意義となる。
ほとんどの組織には数多くのデータストアがあり、組織内・組織間でデータを移動させることは IT 組織の重要な任務となっている。
複雑さとそれに伴うコストを管理するために、全社的な視点からデータ統合を設計しなければならない。
データウェアハウスなどのデータハブによりアプリケーション間のインターフェースの数を削減することができる。
DII のゴールは以下
法令を遵守しながら、必要とするフォーマットと時間枠でデータを安全に提供する。 共有のモデルとインターフェースを開発することでソリューションを管理するコストと複雑さを軽減する。 重要なイベントを特定し、アラートとアクションを自動的に起動する。 ビジネスインテリジェンス、アナリティクス、マスターデータ管理、業務効率化の取り組みをサポートする。 概念・用語など 抽出、変換、取込 DII の中心にあるのが、抽出 (Extract)、変換 (Transform)、取込 (Load) のいわゆる ETL という基本プロセス。
抽出 ソースから必要なデータを選択し、抽出する 抽出されたデータはディスク上やメモリ上にステージングされる 業務システムで実行される場合は、少ないリソースを利用するように設計する 変換 ソースデータを変換してターゲットデータストアの構造と互換性を持つようにする フォーマット変更、構造の変更、意味的変換、重複排除、並べ替えなどがある 取込 ターゲットシステムに物理的に格納されるか、提供される ELT ターゲットシステムにより多くの変化機能がある場合は、プロセスの順序を ELT にすることができる データレイクへの取込を行うビッグデータ環境では一般的 レイテンシ ソースシステムでデータが生成されてから、ターゲットシステムでそのデータが利用可能になるまでの時間差。
アプローチによってレイテンシの高低が異なる。
バッチ 利用者や自動的な要求に応えて、定期的にアプリケーションや組織間を一定量まとまって移動させる レイテンシは高いが大量データを処理するときのパフォーマンスがいい 低レイテンシを実現するためのマイクロバッチもある 変更データキャプチャ データの変更 (挿入・変更・削除) のデータセットを監視し、その差分をターゲットのシステムに渡す DBMS のアクティビティログをコピーし、処理する形で行われることもある 準リアルタイムとイベント駆動 設定された予定により1日を通して分割された少量のデータセットで処理されたり、データ更新などのイベントが発生したときに処理されたりする 一般的にエンタープライズ・サービス・バスを利用して実装される 非同期 データ提供側は受信側の更新確認を待たずに処理を続行する リアルタイム、同期 次のトランザクションを実行する前に、他のアプリケーションからの確認を受け取るまで実行プロセスが待機する 非同期と比べて状態管理の負担が少ないが、他のトランザクションをブロックしたり遅延させたりすることもある 低レイテンシまたはストリーミング イベントが発生したときにシステムからリアルタイムで連続して流れる リプリケーション 分析やクエリによるパフォーマンス低下を防ぐために、トランザクション処理環境にリプリケーション (複製) を使用することがある。</description>
    </item>
    
  </channel>
</rss>
