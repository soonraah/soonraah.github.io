<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data Integration on Froglog</title>
    <link>https://soonraah.github.io/tags/data-integration/</link>
    <description>Recent content in Data Integration on Froglog</description>
    <image>
      <title>Froglog</title>
      <url>https://soonraah.github.io/image/brand/soonraah_full.png</url>
      <link>https://soonraah.github.io/image/brand/soonraah_full.png</link>
    </image>
    <generator>Hugo -- 0.138.0</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 04 Apr 2024 06:30:00 +0900</lastBuildDate>
    <atom:link href="https://soonraah.github.io/tags/data-integration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>読書メモ: DMBOK2 第8章 データ統合と相互運用性</title>
      <link>https://soonraah.github.io/posts/dmbok-chapter-8/</link>
      <pubDate>Thu, 04 Apr 2024 06:30:00 +0900</pubDate>
      <guid>https://soonraah.github.io/posts/dmbok-chapter-8/</guid>
      <description>&lt;h2 id=&#34;このポストについて&#34;&gt;このポストについて&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.dama-japan.org/Introduction.html&#34;&gt;DMBOK2&lt;/a&gt; を読み進めていくシリーズ。&lt;br&gt;
今回は第8章「データ統合と相互運用性」について。&lt;br&gt;
業務で扱っているデータ基盤はデータ統合が不完全であるため、なんとかしたいと考えている。&lt;/p&gt;
&lt;p&gt;以降、特に注釈のない引用は DMBOK2 第8章からの引用とする。&lt;/p&gt;
&lt;h2 id=&#34;データストレージと相互運用性とは&#34;&gt;データストレージと相互運用性とは&lt;/h2&gt;
&lt;p&gt;データ統合と相互運用性 (DII: Data Integration and Interoperability) は次のように定義されている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;アプリケーションや組織内および相互間におけるデータの移動と統合を管理する&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;データの移動を効率的に管理することがそのビジネス上の意義となる。&lt;br&gt;
ほとんどの組織には数多くのデータストアがあり、組織内・組織間でデータを移動させることは IT 組織の重要な任務となっている。&lt;br&gt;
複雑さとそれに伴うコストを管理するために、全社的な視点からデータ統合を設計しなければならない。&lt;br&gt;
データウェアハウスなどのデータハブによりアプリケーション間のインターフェースの数を削減することができる。&lt;/p&gt;
&lt;p&gt;DII のゴールは以下&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;法令を遵守しながら、必要とするフォーマットと時間枠でデータを安全に提供する。&lt;/li&gt;
&lt;li&gt;共有のモデルとインターフェースを開発することでソリューションを管理するコストと複雑さを軽減する。&lt;/li&gt;
&lt;li&gt;重要なイベントを特定し、アラートとアクションを自動的に起動する。&lt;/li&gt;
&lt;li&gt;ビジネスインテリジェンス、アナリティクス、マスターデータ管理、業務効率化の取り組みをサポートする。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;概念用語など&#34;&gt;概念・用語など&lt;/h2&gt;
&lt;h3 id=&#34;抽出変換取込&#34;&gt;抽出、変換、取込&lt;/h3&gt;
&lt;p&gt;DII の中心にあるのが、抽出 (Extract)、変換 (Transform)、取込 (Load) のいわゆる ETL という基本プロセス。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽出
&lt;ul&gt;
&lt;li&gt;ソースから必要なデータを選択し、抽出する&lt;/li&gt;
&lt;li&gt;抽出されたデータはディスク上やメモリ上にステージングされる&lt;/li&gt;
&lt;li&gt;業務システムで実行される場合は、少ないリソースを利用するように設計する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変換
&lt;ul&gt;
&lt;li&gt;ソースデータを変換してターゲットデータストアの構造と互換性を持つようにする&lt;/li&gt;
&lt;li&gt;フォーマット変更、構造の変更、意味的変換、重複排除、並べ替えなどがある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;取込
&lt;ul&gt;
&lt;li&gt;ターゲットシステムに物理的に格納されるか、提供される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ELT
&lt;ul&gt;
&lt;li&gt;ターゲットシステムにより多くの変化機能がある場合は、プロセスの順序を ELT にすることができる&lt;/li&gt;
&lt;li&gt;データレイクへの取込を行うビッグデータ環境では一般的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;レイテンシ&#34;&gt;レイテンシ&lt;/h3&gt;
&lt;p&gt;ソースシステムでデータが生成されてから、ターゲットシステムでそのデータが利用可能になるまでの時間差。&lt;br&gt;
アプローチによってレイテンシの高低が異なる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バッチ
&lt;ul&gt;
&lt;li&gt;利用者や自動的な要求に応えて、定期的にアプリケーションや組織間を一定量まとまって移動させる&lt;/li&gt;
&lt;li&gt;レイテンシは高いが大量データを処理するときのパフォーマンスがいい&lt;/li&gt;
&lt;li&gt;低レイテンシを実現するためのマイクロバッチもある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;変更データキャプチャ
&lt;ul&gt;
&lt;li&gt;データの変更 (挿入・変更・削除) のデータセットを監視し、その差分をターゲットのシステムに渡す&lt;/li&gt;
&lt;li&gt;DBMS のアクティビティログをコピーし、処理する形で行われることもある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;準リアルタイムとイベント駆動
&lt;ul&gt;
&lt;li&gt;設定された予定により1日を通して分割された少量のデータセットで処理されたり、データ更新などのイベントが発生したときに処理されたりする&lt;/li&gt;
&lt;li&gt;一般的にエンタープライズ・サービス・バスを利用して実装される&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非同期
&lt;ul&gt;
&lt;li&gt;データ提供側は受信側の更新確認を待たずに処理を続行する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;リアルタイム、同期
&lt;ul&gt;
&lt;li&gt;次のトランザクションを実行する前に、他のアプリケーションからの確認を受け取るまで実行プロセスが待機する&lt;/li&gt;
&lt;li&gt;非同期と比べて状態管理の負担が少ないが、他のトランザクションをブロックしたり遅延させたりすることもある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;低レイテンシまたはストリーミング
&lt;ul&gt;
&lt;li&gt;イベントが発生したときにシステムからリアルタイムで連続して流れる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;リプリケーション&#34;&gt;リプリケーション&lt;/h3&gt;
&lt;p&gt;分析やクエリによるパフォーマンス低下を防ぐために、トランザクション処理環境にリプリケーション (複製) を使用することがある。&lt;br&gt;
多くの DBMS にはリプリケーションを作るためのユーティリティ機能がある。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
