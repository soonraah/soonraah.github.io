<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Data Contracts on Froglog</title>
    <link>https://soonraah.github.io/tags/data-contracts/</link>
    <description>Recent content in Data Contracts on Froglog</description>
    <image>
      <title>Froglog</title>
      <url>https://soonraah.github.io/image/brand/soonraah_full.png</url>
      <link>https://soonraah.github.io/image/brand/soonraah_full.png</link>
    </image>
    <generator>Hugo -- 0.147.3</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 09 May 2024 22:30:00 +0900</lastBuildDate>
    <atom:link href="https://soonraah.github.io/tags/data-contracts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Contract CLI から考える Data Contracts ファーストのデータパイプラインの未来</title>
      <link>https://soonraah.github.io/posts/data-contract-cli/</link>
      <pubDate>Thu, 09 May 2024 22:30:00 +0900</pubDate>
      <guid>https://soonraah.github.io/posts/data-contract-cli/</guid>
      <description>&lt;h2 id=&#34;このポストについて&#34;&gt;このポストについて&lt;/h2&gt;
&lt;p&gt;Data Contract CLI を触ってみたところ、面白かったのとこれからのデータパイプライン開発について思うところがあったので書いてみる。&lt;/p&gt;
&lt;h2 id=&#34;data-contract-cli-とは&#34;&gt;Data Contract CLI とは？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/datacontract/datacontract-cli&#34;&gt;datacontract/datacontract-cli&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Data Contract CLI は data contracts を運用するためのオープンソースのコマンドラインツールである。&lt;/p&gt;
&lt;p&gt;data contracts の概念については&lt;a href=&#34;https://soonraah.github.io/posts/looked-into-data-contracts/&#34;&gt;以前の記事&lt;/a&gt;で詳しく書いているのでそちらをご参考いただければと。&lt;br&gt;
ただしこちらの記事は1年前のものであり、今回取り上げる Data Contract CLI の登場などを含めて現在では data contracts を取り巻く状況も変わっている可能性があることに注意。&lt;/p&gt;
&lt;p&gt;Data Contract CLI は Python で開発されており、pip でインストールすることができる。&lt;br&gt;
この記事を書いている時点では v0.10.3 が最新であり、この記事の内容はこのバージョンに基づいている。&lt;/p&gt;
&lt;p&gt;Data Contract CLI で扱う data contracts は YAML で定義される前提となっており、その仕様は &lt;a href=&#34;https://github.com/datacontract/datacontract-specification&#34;&gt;datacontract/datacontract-specification&lt;/a&gt; で決められている。&lt;br&gt;
この data contracts に対して Data Contract CLI では次のようなことが行える。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lint によるフォーマットチェック&lt;/li&gt;
&lt;li&gt;データソースに接続した上での schema やデータ品質のテスト&lt;/li&gt;
&lt;li&gt;data contracts の破壊的な変更の検出&lt;/li&gt;
&lt;li&gt;JSON Schema や dbt など、他の形式からの／へのインポートとエクスポート&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の図がイメージしやすい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Data Contract について調べた</title>
      <link>https://soonraah.github.io/posts/looked-into-data-contracts/</link>
      <pubDate>Sat, 08 Apr 2023 17:00:00 +0900</pubDate>
      <guid>https://soonraah.github.io/posts/looked-into-data-contracts/</guid>
      <description>&lt;p&gt;データエンジニアリングの領域で少し前から目にするようになった &amp;ldquo;data contract&amp;rdquo; という言葉。&lt;br&gt;
なんとなく今の業務で困っている課題の解決になりそうな気がしつつもよくわかっていなかったので調べてみた。&lt;br&gt;
data contract について語られているいくつかのブログ記事などを参考にしている。&lt;/p&gt;
&lt;h2 id=&#34;data-contract-とは&#34;&gt;Data Contract とは&lt;/h2&gt;
&lt;p&gt;データの schema というのはナマモノで、いろいろな理由で変更されることがある。&lt;br&gt;
schema を変更する場合、その schema のデータ (table や log) が所属する単一のビジネス機能や application のドメインで行われることになる。&lt;br&gt;
そのドメインの閉じた世界で考える分にはこれで問題ないのだが、DWH や data lake など組織レベルのデータ基盤でデータを流通していた場合はその先のことも考えないといけなくなる。&lt;br&gt;
このようにチームを超える影響というのは、ビジネス機能に責任を持っているチームからは見えにくくなっていることが多い。&lt;br&gt;
上流の application 側で schema を変更したら下流のデータ基盤の ETL 処理がぶっ壊れてしまった、というのはデータ基盤運用あるあるではないだろうか。&lt;/p&gt;
&lt;p&gt;というところを解決して平和に過ごせるようにすることが data contract の主なモチベーションだと思われる。&lt;br&gt;
&amp;ldquo;contract&amp;rdquo; は日本語で言うところの「契約」。&lt;br&gt;
組織におけるデータ流通において、データの送り手である producer 側と受け手である consumer 側との間で合意した契約を遵守することにより、前述のような問題を避けることができるというのが data contract である。&lt;br&gt;
組織内のデータの見通しがよくなったり、パイプラインを宣言的に開発することができるようになるというメリットもある。&lt;/p&gt;
&lt;p&gt;エンジニアにとっては Datafold のブログ記事の例を読むとイメージしやすいかもしれない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To provide another analogy, data contracts are what API is for the web services. Say we want to get data from Twitter. One way is to scrape it by downloading and parsing the HTML of Twitter’s webpage. This may work, but our scraper will likely break occasionally, if Twitter, for instance, changes a name of a CSS class or HTML structure. There is no contract between Twitter’s web page and our scraper. However, if we access the same data via Twitter’s API, we know exactly the structure of the response we’re going to get. An API has required inputs, predictable outputs, error codes, SLAs (service level agreements – e.g. uptime), and terms of use, and other important properties. Importantly, API is also versioned which helps ensure that changes to the API won’t break end user’s applications, and to take advantage of those changes users would graciously migrate to the new version.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
