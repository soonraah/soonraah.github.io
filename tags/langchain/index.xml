<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LangChain on Froglog</title>
    <link>https://soonraah.github.io/tags/langchain/</link>
    <description>Recent content in LangChain on Froglog</description>
    <image>
      <title>Froglog</title>
      <url>https://soonraah.github.io/image/brand/soonraah_full.png</url>
      <link>https://soonraah.github.io/image/brand/soonraah_full.png</link>
    </image>
    <generator>Hugo -- 0.147.3</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 18 Jun 2025 07:30:00 +0900</lastBuildDate>
    <atom:link href="https://soonraah.github.io/tags/langchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ふつうのデータ基盤移行 - Part 4. AI ワークフローで移行作業効率化編</title>
      <link>https://soonraah.github.io/posts/ordinary-data-platform-migration-part-4/</link>
      <pubDate>Wed, 18 Jun 2025 07:30:00 +0900</pubDate>
      <guid>https://soonraah.github.io/posts/ordinary-data-platform-migration-part-4/</guid>
      <description>&lt;h2 id=&#34;このポストについて&#34;&gt;このポストについて&lt;/h2&gt;
&lt;p&gt;データ基盤移行について書いていくシリーズです。&lt;br&gt;
シリーズ一覧は&lt;a href=&#34;https://soonraah.github.io/tags/%E3%81%B5%E3%81%A4%E3%81%86%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%9F%BA%E7%9B%A4%E7%A7%BB%E8%A1%8C/&#34;&gt;こちら&lt;/a&gt;から。&lt;/p&gt;
&lt;p&gt;前回 &lt;a href=&#34;https://soonraah.github.io/posts/ordinary-data-platform-migration-part-3/&#34;&gt;Part 3. アーキテクチャ編&lt;/a&gt;ではどういったシステム構成にしたかを書きました。&lt;br&gt;
今回はその技術スタックへと移行するための苦労と効率化について書きます。&lt;/p&gt;
&lt;p&gt;(次は CI/CD の話をすると書きましたが…スマンありゃウソだった)&lt;/p&gt;
&lt;h2 id=&#34;スコープ&#34;&gt;スコープ&lt;/h2&gt;
&lt;p&gt;今回はやや小さいスコープの話です。&lt;br&gt;
データ基盤における ETL (ELT) 処理の移行作業を対象としています。&lt;br&gt;
移行作業における工数的な課題を AI ワークフローを作って効率化して軽減したという話になります。&lt;br&gt;
ETL 以外の移行作業は今回はスコープ外となります。&lt;/p&gt;
&lt;h2 id=&#34;課題&#34;&gt;課題&lt;/h2&gt;
&lt;p&gt;旧データ基盤から新データ基盤へと table およびそれを更新するための処理を移行するにあたり工数面での課題が2つあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技術スタックの移行&lt;/li&gt;
&lt;li&gt;column 命名などの標準化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらについて述べます。&lt;/p&gt;
&lt;h3 id=&#34;技術スタックの移行&#34;&gt;技術スタックの移行&lt;/h3&gt;
&lt;p&gt;データ基盤の移行において、新旧の環境で技術スタックは次のようになっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旧データ基盤
&lt;ul&gt;
&lt;li&gt;ETL: Glue Job&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新データ基盤
&lt;ul&gt;
&lt;li&gt;ELT: dbt-databricks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;つまり Glue Job の Python コードを dbt model、つまり SQL に翻訳する必要があり、それなりに手間がかかります。&lt;br&gt;
さらにこの Python コードは次のような問題もあり、移行のハードルを上げます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UDF を実装して特殊な処理を行っているケースがある&lt;/li&gt;
&lt;li&gt;Spark の API だけでなく Glue の API をふんだんに使っている (なるべく Spark に寄せればいいものを…)&lt;/li&gt;
&lt;li&gt;(ここ数年の業務で見た中で一番というぐらいに) コード品質が低い&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;column-命名などの標準化&#34;&gt;column 命名などの標準化&lt;/h3&gt;
&lt;p&gt;旧データ基盤は利用者への配慮があまりない状態で table の schema が作られており、利用者にとって使いにくいものとなっていました。&lt;br&gt;
それを改善するため、新データ基盤では次のようなルールを導入しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>読書メモ: LangChainとLangGraphによるRAG・AIエージェント［実践］入門</title>
      <link>https://soonraah.github.io/posts/reading-note-agent-book/</link>
      <pubDate>Sun, 02 Mar 2025 23:45:00 +0900</pubDate>
      <guid>https://soonraah.github.io/posts/reading-note-agent-book/</guid>
      <description>&lt;h2 id=&#34;書籍について&#34;&gt;書籍について&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gihyo.jp/book/2024/978-4-297-14530-9&#34;&gt;西見 公宏; 吉田 真吾; 大嶋 勇樹. LangChainとLangGraphによるRAG・AIエージェント［実践］入門 エンジニア選書. 株式会社技術評論社.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タイトルのとおりで RAG や AI エージェントについて書かれた本。&lt;br&gt;
出版は2024年11月。&lt;br&gt;
LangChain や LangGraph を使ったサンプルコードが豊富に載っている。&lt;br&gt;
著者の方は3名ともジェネラティブエージェンツ社の方で、AI エージェントを扱う会社らしい。&lt;br&gt;
前作として『&lt;a href=&#34;https://gihyo.jp/book/2023/978-4-297-13839-4&#34;&gt;ChatGPT/LangChainによるチャットシステム構築［実践］入門&lt;/a&gt;』という本もあり、本書の何章かは前作の内容を引き継いでアップデートしているとのこと。&lt;/p&gt;
&lt;p&gt;個人的にはこれまで LLM や LangChain など追えていなかったので勉強になったし、自分でコードを写経して動かしてみるのがとても面白かった。&lt;br&gt;
AI エージェントまわりの技術を実感したい人におすすめ。&lt;br&gt;
ちなみにサンプルコードを動かすためには OpenAI をはじめとする様々なサービスに登録する必要があり、料金が発生するものも含まれている。&lt;/p&gt;
&lt;h2 id=&#34;このポストについて&#34;&gt;このポストについて&lt;/h2&gt;
&lt;p&gt;書籍「LangChainとLangGraphによるRAG・AIエージェント［実践］入門」を読んで、面白かったので内容をまとめる。&lt;br&gt;
各章ごとに内容を挙げていってもいいのだが、ここではそうはせず、本書に登場する言葉や概念をまとめていくことにする。&lt;/p&gt;
&lt;p&gt;ちなみにこの記事で紹介するプロンプト等は書籍そのままではなく、少し変更している。&lt;br&gt;
実際のプロンプトを知りたい場合は書籍を読んでください。&lt;/p&gt;
&lt;h2 id=&#34;プロンプトエンジニアリング&#34;&gt;プロンプトエンジニアリング&lt;/h2&gt;
&lt;p&gt;これは知っている人も多いだろう。&lt;br&gt;
プロンプトとは主に自然言語で記述される、LLM に与える命令のこと。&lt;br&gt;
LLM をアプリケーションに組み込む場合はプロンプトはテンプレート化し、入力データをそれに差し込む形となる。&lt;/p&gt;
&lt;p&gt;LLM は必ずしも人間の出す命令に対して望ましい回答を出力してくれるわけではない。&lt;br&gt;
望ましい回答を出力してもらえるよう、プロンプトを工夫するテクニックがプロンプトエンジニアリングである。&lt;br&gt;
本書ではプロンプトエンジニアリングの具体的な手法として次の3つが紹介されていた。&lt;/p&gt;
&lt;p&gt;ちなみにここで例として示している出力は実際に OpenAI の LLM &lt;code&gt;gpt-4o-mini&lt;/code&gt; で出力したものである。&lt;/p&gt;
&lt;h3 id=&#34;zero-shot-プロンプティング&#34;&gt;Zero-shot プロンプティング&lt;/h3&gt;
&lt;p&gt;簡単なタスクであれば、特に追加の情報がなくとも (=Zero-shot) 望ましい回答を得ることができる。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;system: 次の日本酒のレビューをポジティブ・ネガティブ・中立のどれかに分類してください。
user: ふくよかで芳醇な香り
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出力&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ポジティブ
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;few-shot-プロンプティング&#34;&gt;Few-shot プロンプティング&lt;/h3&gt;
&lt;p&gt;より複雑なタスクになった場合、デモンストレーションを与えることで回答の精度を高めることができる。&lt;br&gt;
いくつかのデモンストレーションを示すため、Zero-shot ではなく Few-shot である。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
